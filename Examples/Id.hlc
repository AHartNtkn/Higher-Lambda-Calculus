module Id where

import Unit

Id : (A : U[0]) (a : A) (b : A) . U[0]
  = (A : U[0]) (a : A) (b : A) (P : (a : A) . U[0]) (pa : P a) . P b

refl : (A : U[0]) (a : A) . Id A a a
     = (A : U[0]) (a : A) (P : (a : A) . U[0]) (pa : P a) . pa

subId : (A : U[0]) (a : A) (a' : a) (b' : a) . U[0]
  = (A : U[0]) (a : A) (a' : a) (b' : a) (P : (a' : a) . U[0]) (pa : P a') . P b'

subRefl : (A : U[0]) (a : A) (a' : a) . subId A a a' a'
        = (A : U[0]) (a : A) (a' : a) (P : (a' : a) . U[0]) (pa : P a') . pa

interval : U[0]
  = (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . X

left : interval
  = (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . a

right : interval
  = (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . b

left2Right : (l : left) . right
  = (l : left) (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . f ((a : X) . X) a b (l X a b f)

right2Left : (l : right) . left
  = (r : right) (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . f ((a : X) . X) b a (r X a b f)

left2Left : (l : left) . left
  = (l : left) (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . f ((a : X) . X) a a (l X a b f)

right2Right : (r : right) . right
  = (r : right) (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) (pb : P b) (pa' : pa) . pb) . f ((a : X) . X) b b (r X a b f)


-- PLeft2Right : (P : (i : interval) . *) (pl : P left) . P right
--  = (P : (i : interval) . *) (pl : P left) . 



intt : U[0]
  = (X : U[0]) (a : X) (b : X) (f : Id X a b) . X

inttElim : (A : U[0]) (a : A) (b : A) (e : Id A a b) (i : intt) . A
        = (A : U[0]) (a : A) (b : A) (e : Id A a b) (i : intt) . i A a b e


{-
Note: This doesn't type-check

  intt : U[0]
    = (X : U[0]) (a : X) (b : X) (f : (P : (a : X) . U[0]) (pa : P a) . P b) . X

  inttElim : (A : U[0]) (a : A) (b : A) (e : Id A a b) (i : intt) . A
          = (A : U[0]) (a : A) (b : A) (e : Id A a b) (i : intt) . i A a b e

since (P : (a : X) . U[0]) (pa : P a) . P b is assumed by default to be of type
 (P : (a : X) . U[0]) (pa : P a) . U[0], not U[0]. Consider adding additional
 type annotations so we can write something like

  intt : U[0]
    = (X : U[0]) (a : X) (b : X) (f : ((P : (a : X) . U[0]) (pa : P a) . P b : U[0])) . X

which should then type-check properly.
-}


