module Nat where

nat : U[0] = (A : U[0]) (s : (a : A) . A) (z : A) . A

zero : nat = (A : U[0]) (s : (a : A) . A) (z : A) . z

natfun : (A : U[0]) (s : (a : A) . A) (z : A) . U[0]
  = (A : U[0]) (s : (a : A) . A) (z : A) . A

-- Doesn't type check, and shouldn't.
-- nconv : (n : nat) . natfun
--   = (n : nat) . n

znat : natfun nat = zero nat

znat2 : natfun = zero
