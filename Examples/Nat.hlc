module Nat where

nat : * = (A : *) (s : (a : A) . A) (z : A) . A

zero : nat = (A : *) (s : (a : A) . A) (z : A) . z

natfun : (A : *) (s : (a : A) . A) (z : A) . *
  = (A : *) (s : (a : A) . A) (z : A) . A

nconv : (n : nat) . natfun
  = (n : nat) . n

znat : natfun nat = zero nat

znat2 : natfun = zero
