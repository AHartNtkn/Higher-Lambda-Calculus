module Nat where

nat : U[0] = (A + U[0]) (s + (a + A) . A) (z + A) . A

zero : nat = (A + U[0]) (s + (a + A) . A) (z + A) . z

-- Note: There's a glitch issue here. This *should* type-check.
-- succ : (n + nat) . nat
--   = (n + nat) (A = U[0]) (s + (a + A) . A) (z + A) . s (n A s z)

natfun : (A + U[0]) (s + (a + A) . A) (z + A) . U[0]
  = (A + U[0]) (s + (a + A) . A) (z + A) . A

-- Doesn't type check, and shouldn't.
-- nconv : (n + nat) . natfun
--   = (n + nat) . n

znat : natfun nat = zero nat


znat2 : natfun = zero

-- Doesn't type check, and shouldn't.
-- natfun2 : (A = U[0]) (s + (a + A) . A) (z : A) . U[0]
--  = nat

-- Doesn't type check, and shouldn't.
-- natfun2 : (A = U[0]) (s : (a : A) . A) (z : A) . U[0]
--  = (A = U[0]) (s : (a : A) . A) (z : A) . nat A s z